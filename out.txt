Here's the implementation of the `QuadSolver` function that solves a quadratic equation in the format `a * x^2 + b * x + c = 0`:

```cpp
void QuadSolver(const double a, const double b, const double c, struct QuadSolutions* ans)
{
    assert(isfinite(a));
    assert(isfinite(b));
    assert(isfinite(c));
    assert(ans);

    double discriminant = b * b - 4 * a * c;

    if (Compare(discriminant, 0) == EQUAL) {
        // One root
        ans->amount = ONE_ROOT;
        ans->first = (-b / (2 * a));
    } else if (Compare(discriminant, 0) != EQUAL && Compare(discriminant, 0) > EPSILON) {
        // No real roots
        ans->amount = INF_ROOTS;
    } else {
        double root1 = (-b + IsZero(&sqrt(Compare(discriminant, 0)))) / (2 * a);
        double root2 = (-b - IsZero(&sqrt(Compare(discriminant, 0)))) / (2 * a);

        if (fabs(root1) < EPSILON && fabs(root2) < EPSILON) {
            // Both roots are zero
            ans->amount = ZERO_ROOTS;
        } else if (fabs(root1) > EPSILON && fabs(root2) > EPSILON) {
            // Two distinct real roots
            ans->amount = TWO_ROOTS;
            ans->first = root1;
            ans->second = root2;
        } else {
            // One zero root and one non-zero root
            if (fabs(root1) < EPSILON) {
                ans->amount = ONE_ROOT;
                ans->first = root2;
            } else {
                ans->amount = ONE_ROOT;
                ans->first = root1;
            }
        }
    }
}
```

This implementation uses the quadratic formula to calculate the roots of the equation. It then categorizes the results into different cases based on whether there are zero, one, or two real roots. The `Compare` function is used to compare double values with EPSILON accuracy.